{
  "name": "My workflow  5",
  "nodes": [
    {
      "parameters": {
        "options": {
          "systemMessage": "=You are an assistant that helps manage emails via an MCP HTTP API.\nThe current date and time is: {{$now}}.\n\nâœ… Multi-Account Support:\nThis email assistant supports multiple Outlook accounts on the same system. You can specify which folder (Inbox, Sent, etc.) to interact with for each account using the `\"folder_name\"` argument when available. For example, searching \"Inbox\" of another account.\n\nðŸ“¡ MCP HTTP API Endpoint:\nPOST http://127.0.0.1:8000/ask\n\nHeaders:\nContent-Type: application/json\n\nðŸ”§ Request Body Format:\n{\n  \"tool\": \"<tool_name>\",\n  \"args\": { ... }\n}\n\nWhere `<tool_name>` is one of:\n- list_folders\n- list_recent_emails\n- search_emails\n- get_email_by_number\n- reply_to_email_by_number\n- create_draft_reply_by_number\n- Compose and send a new email\n- mark_email_as_read\n\nðŸ§  Notes:\n- Always include `\"folder_name\"` if you want to access a folder from a specific account (e.g., \"Inbox\", \"Support\", \"Ahmed\").\n- If no folder is provided, defaults to the primary account's Inbox.\n\nðŸ“˜ Tool Examples:\n\n// âœ… List available folders across all accounts\n{\n  \"tool\": \"list_folders\",\n  \"args\": {}\n}\n\n// âœ… List recent emails from the Inbox folder of a specific account (e.g., last 3 days from \"Ahmed\" account's Inbox)\n// Specify the account with `account_name` and the folder with `folder_name`\n// If `account_name` is omitted, it defaults to the primary account\n{\n  \"tool\": \"list_recent_emails\",\n  \"args\": {\n    \"days\": 3,\n    \"account_name\": \"Ahmed\",\n    \"folder_name\": \"Inbox\"\n  }\n}\n\n// Search for emails containing a specific term within the last N days (e.g., \"invoice\", 7 days).\n// You can optionally specify the folder name (e.g., \"Inbox\") and the account name (email address) to search within a specific account.\n// If `account_name` is not provided, it will search in the default account.\n//\n// Example (search \"invoice\" in Inbox folder of a specific account):\n{\n  \"tool\": \"search_emails\",\n  \"args\": {\n    \"search_term\": \"invoice\",\n    \"days\": 7,\n    \"folder_name\": \"Inbox\",\n    \"account_name\": \"user@example.com\"\n  }\n}\n//\n// Example (search \"invoice\" in default Inbox of the default account):\n{\n  \"tool\": \"search_emails\",\n  \"args\": {\n    \"search_term\": \"invoice\",\n    \"days\": 7\n  }\n}\n\n\n// âœ… Get full details of an email from the last listing (e.g., email #2)\n{\n  \"tool\": \"get_email_by_number\",\n  \"args\": { \"email_number\": 2 }\n}\n\n// âœ… Reply to a previously listed email by number\n{\n  \"tool\": \"reply_to_email_by_number\",\n  \"args\": { \"email_number\": 1, \"reply_text\": \"Thank you for your message.\" }\n}\n\n// âœ… Create a draft reply\n{\n  \"tool\": \"create_draft_reply_by_number\",\n  \"args\": {\n    \"email_number\": 1,\n    \"reply_text\": \"Dear Ahmed, please find the report attached.\"\n  }\n}\n\n// âœ… Compose and send a new email\n{\n  \"tool\": \"Compose and send a new email\",\n  \"args\": {\n    \"to\": \"recipient@example.com\",\n    \"subject\": \"Subject text\",\n    \"body\": \"Body text of the email\"\n  }\n}\n\n// âœ… Mark an email as read\n{\n  \"tool\": \"mark_email_as_read\",\n  \"args\": { \"email_number\": 3 }\n}\n\nðŸ’¡ Tool chaining is allowed: for example, list emails â†’ get details â†’ reply.\nUse `list_folders` to explore available accounts and folders.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        40,
        80
      ],
      "id": "1427ddbd-1f60-4d34-bbdd-c836a6379ebc",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "public": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -220,
        -20
      ],
      "id": "1c57a954-0566-49e6-95e9-04d103045342",
      "name": "When chat message received",
      "webhookId": "34df2aa2-adea-47e7-902d-d662a7223c92"
    },
    {
      "parameters": {
        "sseEndpoint": "http://127.0.0.1:5678/mcp/819696a6-cc54-4211-9033-37bc0f45fa94/sse"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        380,
        340
      ],
      "id": "cb5c219d-63e8-4946-9cf8-977a8417b387",
      "name": "MCP Client",
      "disabled": true
    },
    {
      "parameters": {
        "path": "054567e1-a499-4684-9ffa-1662aed5d54a"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpTrigger",
      "typeVersion": 1,
      "position": [
        -820,
        20
      ],
      "id": "a4d4eb7d-45ab-4874-a738-8d30f6f524de",
      "name": "MCP Server Trigger",
      "webhookId": "054567e1-a499-4684-9ffa-1662aed5d54a"
    },
    {
      "parameters": {
        "path": "89b1f9f4-2ab8-4881-9136-ee1b6d001828",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -240,
        -160
      ],
      "id": "ff8500b3-2417-481c-8f4c-440f18eb3dcf",
      "name": "Webhook",
      "webhookId": "89b1f9f4-2ab8-4881-9136-ee1b6d001828"
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => {\n  return {\n    json: {\n      chatInput: item.json.body?.message || \"greeting\"\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        100,
        -120
      ],
      "id": "a533e7d2-3354-4982-a6e3-286959059ae5",
      "name": "Code"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('URL', ``, 'string') }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Name', ``, 'string') }}",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', ``, 'string') }}"
            },
            {
              "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Name', ``, 'string') }}",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', ``, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        180,
        340
      ],
      "id": "d772bc56-eff8-463d-9303-636ff743bec3",
      "name": "GetEmailes"
    },
    {
      "parameters": {
        "contextWindowLength": 2000
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -20,
        340
      ],
      "id": "bd8a4099-8ac1-4c1e-a804-3766ce1b9b97",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 1
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -480,
        180
      ],
      "id": "00173ae9-1cb5-4080-a840-7500326cf6f4",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "jsCode": "function generateUUID() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nreturn $input.all().map(item => {\n\n  const sessionId = generateUUID();\n\n  const chatInput = `\ncheck if there is received email in the unread status ( i mean by that the email has been opened yet or not seen yet )from the inbox folder.for last 2 days \nPlease do the following:\n1. Analyze if this email needs a reply.\n2. If yes, write a professional and appropriate reply.\n3. Do not send anything .  you Just return the reply as a draft email that I can review later. using the tool (create_draft_reply_by_numbe)\n4- and mark the email readed using the tool ( mark_email_as_read)\nIf the email does not need a reply, respond with \"No reply needed.\"\n`;\n\n  return {\n    json: {\n      sessionId,\n      chatInput\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -260,
        180
      ],
      "id": "473e4978-998e-4a8d-b81b-df14ca77d8e4",
      "name": "Code1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        -180,
        380
      ],
      "id": "0bf7a007-c58b-4306-b3c6-ff0c369bb6c7",
      "name": "DeepSeek Chat Model",
      "credentials": {
        "deepSeekApi": {
          "id": "zFylIjARpTBtJ6fp",
          "name": "DeepSeek account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -680,
        420
      ],
      "id": "93fdc645-cff2-4e71-b8e3-fa9f7ae31c18",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "fym4P78T7TGCyHrG",
          "name": "OpenAi account 2"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        -340,
        380
      ],
      "id": "10021999-97e9-4bff-a8e9-8d015102bc39",
      "name": "DeepSeek Chat Model1",
      "credentials": {
        "deepSeekApi": {
          "id": "zFylIjARpTBtJ6fp",
          "name": "DeepSeek account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MCP Client": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GetEmailes": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "DeepSeek Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "aa1e2c51-3edb-4aa7-b3cc-42f7c0210233",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "d07e7253b9fc5efbc148b4bef7353d8894b7d2f24d7dab96b1b513171c9840f1"
  },
  "id": "JPOmynwulYzjfcoB",
  "tags": []
}